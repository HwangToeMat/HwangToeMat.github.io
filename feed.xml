<feed xmlns="https://www.w3.org/2005/Atom" xml:lang="ko">
<generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator>
<link href="https://hwangtoemat.github.io//feed.xml" rel="self" type="application/rss+xml"/>
<link href="https://hwangtoemat.github.io//" rel="alternate" type="text/html" hreflang="ko"/>
<updated>2020-03-31T11:44:50+00:00</updated>
<id>https://hwangtoemat.github.io//feed.xml</id>
<title type="html">HTM_LAB</title>
<subtitle>HTM_LAB for AI Projects </subtitle>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<entry>
<title type="html">2. Football play detection with Tensorflow API</title>
<link href="https://hwangtoemat.github.io//ai-project/2020-03-11-Football-play-detection-with-Tensorflow-API/" rel="alternate" type="text/html" title="2. Football play detection with Tensorflow API"/>
<published>2020-03-11T00:00:00+00:00</published>
<updated>2020-03-11T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//ai-project/Football%20play%20detection%20with%20Tensorflow%20API
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//ai-project/2020-03-11-Football-play-detection-with-Tensorflow-API/">
<p><a href="https://github.com/HwangToeMat/Tensorflow-API-HTM/tree/master/2.object_detection">[main code]</a></p> <h2 id="data-download">Data Download</h2> <p><strong>EasyDownloader <a href="https://github.com/HwangToeMat/Open-Images_EasyDownload">[GitHub Link]</a></strong></p> <p>Download images that have both ‘football category’ and ‘personal category’ in each image with the code below.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python ../0.Open-Images_EasyDownload/EasyDownloader.py --category "Football" --category "Person" --type "inter </code></pre></div></div> <p><strong>tf_record</strong></p> <p>Create tf_record file with Football_label_map.pbtxt and create_Football_tf_record.py</p> <p><strong>label_map</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>item { name: "/m/01226z" id: 1 display_name: "Football" } item { name: "/m/01g317" id: 2 display_name: "Person" } </code></pre></div></div> <p><strong>usage</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python create_Football_tf_record.py --data_dir=../0.Open-Images_EasyDownload/train_data/images --output_dir=./Football_tf_record --label_map_path=./Football_label_map.pbtxt </code></pre></div></div> <h2 id="train">Train</h2> <h3 id="model">model</h3> <table> <thead> <tr> <th>Model name</th> <th style="text-align: center">Speed (ms)</th> <th style="text-align: right">COCO mAP</th> </tr> </thead> <tbody> <tr> <td>mask_rcnn_resnet101_atrous_coco</td> <td style="text-align: center">470</td> <td style="text-align: right">33</td> </tr> <tr> <td>faster_rcnn_resnet101_coco</td> <td style="text-align: center">106</td> <td style="text-align: right">32</td> </tr> <tr> <td>ssd_mobilenet_v2_coco</td> <td style="text-align: center">31</td> <td style="text-align: right">22</td> </tr> <tr> <td><strong>ssdlite_mobilenet_v2_coco</strong></td> <td style="text-align: center"><strong>27</strong></td> <td style="text-align: right"><strong>22</strong></td> </tr> </tbody> </table> <p>We used <strong>ssdlite_mobilenet_v2_coco<a href="https://download.tensorflow.org/models/object_detection/ssdlite_mobilenet_v2_coco_2018_05_09.tar.gz">[Download Link]</a></strong> to analyze soccer games in real time because we <em>need fast computing speed.</em></p> <h2 id="result">Result</h2> <h3 id="graph">graph</h3> <p><strong>DetectionBoxes_Precision(coco_metrics)</strong></p> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/2.object_detection/images/DetectionBoxes_Precision.png?raw=true" style="max-width:100%;" /></p> <p><strong>DetectionBoxes_Recall(coco_metrics)</strong></p> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/2.object_detection/images/DetectionBoxes_Recall.png?raw=true" style="max-width:100%;" /></p> <p><strong>Performance by category(oid_v2_metrics)</strong></p> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/2.object_detection/images/oid_metrics_category.png?raw=true" style="max-width:100%;" /></p> <p><strong>Performance by total(oid_v2_metrics)</strong></p> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/2.object_detection/images/oid_metrics_total.png?raw=true" style="max-width:100%;" /></p> <h3 id="imageleft--our-model--right--ground-truth-">Image(Left : our model / Right : ground truth )</h3> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/2.object_detection/images/result1.png?raw=true" alt="result1" style="max-width:100%;" /> <img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/2.object_detection/images/result2.png?raw=true" alt="result2" style="max-width:100%;" /> <img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/2.object_detection/images/result3.png?raw=true" alt="result3" style="max-width:100%;" /></p> <h2 id="conclusion">Conclusion</h2> <p><strong>As you can see in the image of the result, ground truth recognizes people as one, but in our model, we see one by one.</strong></p>
</content>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html">[main code]</summary>
<media:thumbnail xmlns:media="https://search.yahoo.com/mrss/" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/tap-2.png?raw=true"/>
<media:content xmlns:media="https://search.yahoo.com/mrss/" medium="image" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/tap-2.png?raw=true"/>
</entry>
<entry>
<title type="html">1. Break through the reCAPTCHA with Tensorflow API</title>
<link href="https://hwangtoemat.github.io//ai-project/2020-02-29-Break-through-the-reCAPTCHA-with-Tensorflow-API/" rel="alternate" type="text/html" title="1. Break through the reCAPTCHA with Tensorflow API"/>
<published>2020-02-29T00:00:00+00:00</published>
<updated>2020-02-29T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//ai-project/Break%20through%20the%20reCAPTCHA%20with%20Tensorflow%20API
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//ai-project/2020-02-29-Break-through-the-reCAPTCHA-with-Tensorflow-API/">
<p><a href="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification.ipynb">[main code]</a></p> <p>Break through the security program for prevent ing macros, reCAPTCHA , using Inception Net.</p> <h2 id="main-code">main code</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Copyright 2015 The TensorFlow Authors. All Rights Reserved. # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # ============================================================================== </span> <span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">absolute_import</span> <span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span> <span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span> <span class="kn">import</span> <span class="nn">os.path</span> <span class="kn">import</span> <span class="nn">re</span> <span class="kn">import</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nn">tarfile</span> <span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> <span class="kn">from</span> <span class="nn">six.moves</span> <span class="kn">import</span> <span class="n">urllib</span> <span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span> <span class="c1"># pylint: disable=line-too-long </span><span class="n">DATA_URL</span> <span class="o">=</span> <span class="s">'https://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz'</span> <span class="c1"># pylint: enable=line-too-long </span> <span class="k">class</span> <span class="nc">NodeLookup</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span> <span class="s">"""Converts integer node ID's to human readable labels."""</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">label_lookup_path</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">uid_lookup_path</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">label_lookup_path</span><span class="p">:</span> <span class="n">label_lookup_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="s">'model'</span><span class="p">,</span> <span class="s">'imagenet_2012_challenge_label_map_proto.pbtxt'</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">uid_lookup_path</span><span class="p">:</span> <span class="n">uid_lookup_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="s">'model'</span><span class="p">,</span> <span class="s">'imagenet_synset_to_human_label_map.txt'</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">node_lookup</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">label_lookup_path</span><span class="p">,</span> <span class="n">uid_lookup_path</span><span class="p">)</span> <span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">label_lookup_path</span><span class="p">,</span> <span class="n">uid_lookup_path</span><span class="p">):</span> <span class="s">"""Loads a human readable English name for each softmax node. Args: label_lookup_path: string UID to integer node ID. uid_lookup_path: string UID to human-readable string. Returns: dict from integer node ID to human-readable string. """</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">tf</span><span class="o">.</span><span class="n">gfile</span><span class="o">.</span><span class="n">Exists</span><span class="p">(</span><span class="n">uid_lookup_path</span><span class="p">):</span> <span class="n">tf</span><span class="o">.</span><span class="n">logging</span><span class="o">.</span><span class="n">fatal</span><span class="p">(</span><span class="s">'File does not exist </span><span class="si">%</span><span class="s">s'</span><span class="p">,</span> <span class="n">uid_lookup_path</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">tf</span><span class="o">.</span><span class="n">gfile</span><span class="o">.</span><span class="n">Exists</span><span class="p">(</span><span class="n">label_lookup_path</span><span class="p">):</span> <span class="n">tf</span><span class="o">.</span><span class="n">logging</span><span class="o">.</span><span class="n">fatal</span><span class="p">(</span><span class="s">'File does not exist </span><span class="si">%</span><span class="s">s'</span><span class="p">,</span> <span class="n">label_lookup_path</span><span class="p">)</span> <span class="c1"># Loads mapping from string UID to human-readable string </span> <span class="n">proto_as_ascii_lines</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">gfile</span><span class="o">.</span><span class="n">GFile</span><span class="p">(</span><span class="n">uid_lookup_path</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span> <span class="n">uid_to_human</span> <span class="o">=</span> <span class="p">{}</span> <span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">r'[n\d]*[ \S,]*'</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">proto_as_ascii_lines</span><span class="p">:</span> <span class="n">parsed_items</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="n">uid</span> <span class="o">=</span> <span class="n">parsed_items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">human_string</span> <span class="o">=</span> <span class="n">parsed_items</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">uid_to_human</span><span class="p">[</span><span class="n">uid</span><span class="p">]</span> <span class="o">=</span> <span class="n">human_string</span> <span class="c1"># Loads mapping from string UID to integer node ID. </span> <span class="n">node_id_to_uid</span> <span class="o">=</span> <span class="p">{}</span> <span class="n">proto_as_ascii</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">gfile</span><span class="o">.</span><span class="n">GFile</span><span class="p">(</span><span class="n">label_lookup_path</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">proto_as_ascii</span><span class="p">:</span> <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">' target_class:'</span><span class="p">):</span> <span class="n">target_class</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">': '</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span> <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">' target_class_string:'</span><span class="p">):</span> <span class="n">target_class_string</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">': '</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="n">node_id_to_uid</span><span class="p">[</span><span class="n">target_class</span><span class="p">]</span> <span class="o">=</span> <span class="n">target_class_string</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># Loads the final mapping of integer node ID to human-readable string </span> <span class="n">node_id_to_name</span> <span class="o">=</span> <span class="p">{}</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">node_id_to_uid</span><span class="o">.</span><span class="n">items</span><span class="p">():</span> <span class="k">if</span> <span class="n">val</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">uid_to_human</span><span class="p">:</span> <span class="n">tf</span><span class="o">.</span><span class="n">logging</span><span class="o">.</span><span class="n">fatal</span><span class="p">(</span><span class="s">'Failed to locate: </span><span class="si">%</span><span class="s">s'</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span> <span class="n">name</span> <span class="o">=</span> <span class="n">uid_to_human</span><span class="p">[</span><span class="n">val</span><span class="p">]</span> <span class="n">node_id_to_name</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">name</span> <span class="k">return</span> <span class="n">node_id_to_name</span> <span class="k">def</span> <span class="nf">id_to_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node_id</span><span class="p">):</span> <span class="k">if</span> <span class="n">node_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">node_lookup</span><span class="p">:</span> <span class="k">return</span> <span class="s">''</span> <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">node_lookup</span><span class="p">[</span><span class="n">node_id</span><span class="p">]</span> <span class="k">def</span> <span class="nf">create_graph</span><span class="p">():</span> <span class="s">"""Creates a graph from saved GraphDef file and returns a saver."""</span> <span class="c1"># Creates graph from saved graph_def.pb. </span> <span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">gfile</span><span class="o">.</span><span class="n">FastGFile</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="s">'model'</span><span class="p">,</span> <span class="s">'classify_image_graph_def.pb'</span><span class="p">),</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span> <span class="n">graph_def</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">GraphDef</span><span class="p">()</span> <span class="n">graph_def</span><span class="o">.</span><span class="n">ParseFromString</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span> <span class="n">_</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">import_graph_def</span><span class="p">(</span><span class="n">graph_def</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">''</span><span class="p">)</span> <span class="k">def</span> <span class="nf">run_inference_on_image</span><span class="p">(</span><span class="n">image</span><span class="p">):</span> <span class="s">"""Runs inference on an image. Args: image: Image file name. Returns: Nothing """</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">tf</span><span class="o">.</span><span class="n">gfile</span><span class="o">.</span><span class="n">Exists</span><span class="p">(</span><span class="n">image</span><span class="p">):</span> <span class="n">tf</span><span class="o">.</span><span class="n">logging</span><span class="o">.</span><span class="n">fatal</span><span class="p">(</span><span class="s">'File does not exist </span><span class="si">%</span><span class="s">s'</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span> <span class="n">image_data</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">gfile</span><span class="o">.</span><span class="n">FastGFile</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span> <span class="c1"># Creates graph from saved GraphDef. </span> <span class="n">create_graph</span><span class="p">()</span> <span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span> <span class="c1"># Some useful tensors: </span> <span class="c1"># 'softmax:0': A tensor containing the normalized prediction across </span> <span class="c1"># 1000 labels. </span> <span class="c1"># 'pool_3:0': A tensor containing the next-to-last layer containing 2048 </span> <span class="c1"># float description of the image. </span> <span class="c1"># 'DecodeJpeg/contents:0': A tensor containing a string providing JPEG </span> <span class="c1"># encoding of the image. </span> <span class="c1"># Runs the softmax tensor by feeding the image_data as input to the graph. </span> <span class="n">softmax_tensor</span> <span class="o">=</span> <span class="n">sess</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">get_tensor_by_name</span><span class="p">(</span><span class="s">'softmax:0'</span><span class="p">)</span> <span class="n">predictions</span> <span class="o">=</span> <span class="n">sess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">softmax_tensor</span><span class="p">,</span> <span class="p">{</span><span class="s">'DecodeJpeg/contents:0'</span><span class="p">:</span> <span class="n">image_data</span><span class="p">})</span> <span class="n">predictions</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span> <span class="c1"># Creates node ID --&gt; English string lookup. </span> <span class="n">node_lookup</span> <span class="o">=</span> <span class="n">NodeLookup</span><span class="p">()</span> <span class="n">top_k</span> <span class="o">=</span> <span class="n">predictions</span><span class="o">.</span><span class="n">argsort</span><span class="p">()[</span><span class="o">-</span><span class="mi">5</span><span class="p">:][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">node_id</span> <span class="ow">in</span> <span class="n">top_k</span><span class="p">:</span> <span class="n">human_string</span> <span class="o">=</span> <span class="n">node_lookup</span><span class="o">.</span><span class="n">id_to_string</span><span class="p">(</span><span class="n">node_id</span><span class="p">)</span> <span class="n">score</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">[</span><span class="n">node_id</span><span class="p">]</span> <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="si">%</span><span class="s">s (score = </span><span class="si">%.5</span><span class="s">f)'</span> <span class="o">%</span> <span class="p">(</span><span class="n">human_string</span><span class="p">,</span> <span class="n">score</span><span class="p">))</span> <span class="k">def</span> <span class="nf">maybe_download_and_extract</span><span class="p">():</span> <span class="s">"""Download and extract model tar file."""</span> <span class="n">dest_directory</span> <span class="o">=</span> <span class="s">'model'</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">dest_directory</span><span class="p">):</span> <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">dest_directory</span><span class="p">)</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">DATA_URL</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="n">filepath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dest_directory</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">filepath</span><span class="p">):</span> <span class="k">def</span> <span class="nf">_progress</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">block_size</span><span class="p">,</span> <span class="n">total_size</span><span class="p">):</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'</span><span class="se">\r</span><span class="s">&gt;&gt; Downloading </span><span class="si">%</span><span class="s">s </span><span class="si">%.1</span><span class="s">f</span><span class="si">%%</span><span class="s">'</span> <span class="o">%</span> <span class="p">(</span> <span class="n">filename</span><span class="p">,</span> <span class="nb">float</span><span class="p">(</span><span class="n">count</span> <span class="o">*</span> <span class="n">block_size</span><span class="p">)</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span><span class="n">total_size</span><span class="p">)</span> <span class="o">*</span> <span class="mf">100.0</span><span class="p">))</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span> <span class="n">filepath</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="n">DATA_URL</span><span class="p">,</span> <span class="n">filepath</span><span class="p">,</span> <span class="n">_progress</span><span class="p">)</span> <span class="k">print</span><span class="p">()</span> <span class="n">statinfo</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">stat</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span> <span class="k">print</span><span class="p">(</span><span class="s">'Successfully downloaded'</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">statinfo</span><span class="o">.</span><span class="n">st_size</span><span class="p">,</span> <span class="s">'bytes.'</span><span class="p">)</span> <span class="n">tarfile</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="s">'r:gz'</span><span class="p">)</span><span class="o">.</span><span class="n">extractall</span><span class="p">(</span><span class="n">dest_directory</span><span class="p">)</span> </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">PIL.Image</span> <span class="k">as</span> <span class="n">pilimg</span> </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA0.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_5_0.png?raw=true" alt="png" /></p> <h2 id="load-model">load model</h2> <ul> <li> <p>default model » DATA_URL = ‘https://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz’</p> </li> <li> <p>any model you want » DATA_URL = ‘XXX’</p> </li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DATA_URL</span> <span class="o">=</span> <span class="s">'https://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz'</span> <span class="n">maybe_download_and_extract</span><span class="p">()</span> </code></pre></div></div> <h2 id="image-classification">image classification</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA1.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_9_0.png?raw=true" alt="png" /></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run_inference_on_image</span><span class="p">(</span><span class="s">'image/reCAPTCHA1.png'</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>moving van (score = 0.73877) golfcart, golf cart (score = 0.04019) mobile home, manufactured home (score = 0.01723) trolleybus, trolley coach, trackless trolley (score = 0.01485) recreational vehicle, RV, R.V. (score = 0.01232) </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA2.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_11_0.png?raw=true" alt="png" /></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run_inference_on_image</span><span class="p">(</span><span class="s">'image/reCAPTCHA2.png'</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi (score = 0.26690) seashore, coast, seacoast, sea-coast (score = 0.08148) screen, CRT screen (score = 0.06434) moving van (score = 0.04228) mobile home, manufactured home (score = 0.03318) </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA3.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_13_0.png?raw=true" alt="png" /></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run_inference_on_image</span><span class="p">(</span><span class="s">'image/reCAPTCHA3.png'</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minivan (score = 0.27316) limousine, limo (score = 0.15485) convertible (score = 0.03864) beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon (score = 0.03772) moving van (score = 0.03242) </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA4.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_15_0.png?raw=true" alt="png" /></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run_inference_on_image</span><span class="p">(</span><span class="s">'image/reCAPTCHA4.png'</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airliner (score = 0.09025) trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi (score = 0.08313) traffic light, traffic signal, stoplight (score = 0.08120) minivan (score = 0.07874) tow truck, tow car, wrecker (score = 0.05683) </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA5.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_17_0.png?raw=true" alt="png" /></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run_inference_on_image</span><span class="p">(</span><span class="s">'image/reCAPTCHA5.png'</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>seashore, coast, seacoast, sea-coast (score = 0.29206) aircraft carrier, carrier, flattop, attack aircraft carrier (score = 0.08607) lakeside, lakeshore (score = 0.06951) airliner (score = 0.05057) mobile home, manufactured home (score = 0.03011) </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA6.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_19_0.png?raw=true" alt="png" /></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run_inference_on_image</span><span class="p">(</span><span class="s">'image/reCAPTCHA6.png'</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>moving van (score = 0.18085) seashore, coast, seacoast, sea-coast (score = 0.15978) mobile home, manufactured home (score = 0.11563) steel arch bridge (score = 0.04356) worm fence, snake fence, snake-rail fence, Virginia fence (score = 0.03528) </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA7.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_21_0.png?raw=true" alt="png" /></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run_inference_on_image</span><span class="p">(</span><span class="s">'image/reCAPTCHA7.png'</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>school bus (score = 0.94535) amphibian, amphibious vehicle (score = 0.00103) trolleybus, trolley coach, trackless trolley (score = 0.00101) passenger car, coach, carriage (score = 0.00091) streetcar, tram, tramcar, trolley, trolley car (score = 0.00088) </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA8.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_23_0.png?raw=true" alt="png" /></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run_inference_on_image</span><span class="p">(</span><span class="s">'image/reCAPTCHA8.png'</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>seashore, coast, seacoast, sea-coast (score = 0.23562) sandbar, sand bar (score = 0.10286) yawl (score = 0.07008) airliner (score = 0.03950) promontory, headland, head, foreland (score = 0.02806) </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span> <span class="n">pilimg</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'image/reCAPTCHA9.png'</span><span class="p">)</span> <span class="n">img</span> </code></pre></div></div> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/reCAPTCHA_classification_files/reCAPTCHA_classification_25_0.png?raw=true" alt="png" /></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run_inference_on_image</span><span class="p">(</span><span class="s">'image/reCAPTCHA9.png'</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>school bus (score = 0.92765) moving van (score = 0.00156) trolleybus, trolley coach, trackless trolley (score = 0.00152) tobacco shop, tobacconist shop, tobacconist (score = 0.00088) thresher, thrasher, threshing machine (score = 0.00087) </code></pre></div></div> <h3 id="summary">Summary</h3> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/image/image1.jpg?raw=true" alt="image1" /> <img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/1.classification/image/image2.jpg?raw=true" alt="image2" /></p> <h3 id="conclusion">Conclusion</h3> <p>The picture quality was not very good, but we all correctly determined whether the bus was included. Program using Inception Net will be able to break through the reCAPTCHA.</p>
</content>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html">[main code]</summary>
<media:thumbnail xmlns:media="https://search.yahoo.com/mrss/" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/tap-1.png?raw=true"/>
<media:content xmlns:media="https://search.yahoo.com/mrss/" medium="image" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/tap-1.png?raw=true"/>
</entry>
<entry>
<title type="html">
0. Easiest way to get the Data for Deep Learning, by using “Open Images”
</title>
<link href="https://hwangtoemat.github.io//ai-project/2020-02-20-Easiest-way-to-get-the-Data-for-Deep-Learning,-by-using-Open-Images/" rel="alternate" type="text/html" title="0. Easiest way to get the Data for Deep Learning, by using “Open Images”"/>
<published>2020-02-20T00:00:00+00:00</published>
<updated>2020-02-20T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//ai-project/Easiest%20way%20to%20get%20the%20Data%20for%20Deep%20Learning,%20by%20using%20%E2%80%9COpen%20Images%E2%80%9D
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//ai-project/2020-02-20-Easiest-way-to-get-the-Data-for-Deep-Learning,-by-using-Open-Images/">
<p><a href="https://github.com/HwangToeMat/Open-Images_EasyDownload">[main code]</a></p> <p>Open Images is the largest annotated image dataset in many regards, for use in training the latest deep convolutional neural networks for computer vision tasks. But, sometimes large capacities of ‘Open Images’ make it difficult to find only the data you need.</p> <p><img src="https://github.com/HwangToeMat/Tensorflow-API-HTM/blob/master/0.Open-Images_EasyDownload/image1.png?raw=true" alt="OpenImages" /></p> <p><strong>Then you can easily get data with this code including Bounding Boxes (600 classes), Object Segmentations, Visual Relationships, and Localized Narratives.<a href="https://github.com/HwangToeMat/Open-Images_EasyDownload">[Github Link]</a></strong></p> <h2 id="settings">Settings</h2> <p>This code needs ‘ratelim’, ‘tqdm’ and ‘checkpoint’. Both ‘tqdm’ and ‘checkpoint’ are included in this repository. But you need to <strong><em>install a ‘ratelim’ using the code below</em></strong> before running.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install ratelim </code></pre></div></div> <h2 id="usage">Usage</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>usage: EasyDownloader.py [-h] [--category CATEGORY] [--type TYPE] [--ndata NDATA] [--label LABEL] [--annotation ANNOTATION] [--imageURL IMAGEURL] [--savepath SAVEPATH] optional arguments: -h, --help show this help message and exit --category CATEGORY Enter the category you want. If you want multi- category, please tag each category. --type TYPE Enter the type of data you want. If you want 'Union data' enter 'sum' else if you want 'intersection data' enter 'inter'. --ndata NDATA Number of data you want --label LABEL Path of class descriptions file. --annotation ANNOTATION Path of bbox annotation file. --imageURL IMAGEURL Path of imageURL file. --savepath SAVEPATH Path where downloaded data will be saved </code></pre></div></div> <h3 id="an-example-of-usage-is-shown-as-follows">An example of usage is shown as follows.</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>### If you use this code at colab, add '!' at the beginning of the line. python EasyDownloader.py --category "Football" --category "Person" --type "inter" --savepath "Football_data" </code></pre></div></div> <p>In this example, you can get images that have <strong>both ‘football category’ and ‘personal category’ in each image.</strong></p> <p>If you enter <strong>“sum”</strong> instead of “inter”, you can get images that have <strong>‘Football category’ or ‘Person category’ in each image.</strong></p> <h2 id="etc">etc…</h2> <p>Image is saved at “{–savepath}/images/[imageURL].jpg”.</p> <p>Information of bbox is saved at “{–savepath}/bbox/bbox.csv”.</p> <p><strong>You can use name of imagefile and column(‘OriginalURL’) of ‘bbox.csv’ to match annotation to image.</strong></p> <h3 id="if-you-want-to-download-more-faster-change-parameters-of-ratelim-in-line-119">If you want to download more faster, change parameters of ratelim in line 119.</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>### Too many calls in a short time can lead to missing data. @ratelim.patient(5, 5) # 5 times in 5 seconds (Gets called at most every 1. seconds) @ratelim.patient(10, 5) # 10 times in 5 seconds (Gets called at most every 0.5 seconds) </code></pre></div></div>
</content>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html">[main code]</summary>
<media:thumbnail xmlns:media="https://search.yahoo.com/mrss/" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/tap-0.png?raw=true"/>
<media:content xmlns:media="https://search.yahoo.com/mrss/" medium="image" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/tap-0.png?raw=true"/>
</entry>
<entry>
<title type="html">Will be soon</title>
<link href="https://hwangtoemat.github.io//backend-project/2020-01-01-Easiest-way-to-get-the-Data-for-Deep-Learning,-by-using-Open-Images/" rel="alternate" type="text/html" title="Will be soon"/>
<published>2020-01-01T00:00:00+00:00</published>
<updated>2020-01-01T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//backend-project/Easiest%20way%20to%20get%20the%20Data%20for%20Deep%20Learning,%20by%20using%20%E2%80%9COpen%20Images%E2%80%9D
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//backend-project/2020-01-01-Easiest-way-to-get-the-Data-for-Deep-Learning,-by-using-Open-Images/"/>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html"/>
</entry>
<entry>
<title type="html">[자료구조] 02. 스택 (Stack) - python</title>
<link href="https://hwangtoemat.github.io//computer-science/2019-09-18-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-02.-%EC%8A%A4%ED%83%9D-(Stack)/" rel="alternate" type="text/html" title="[자료구조] 02. 스택 (Stack) - python"/>
<published>2019-09-18T00:00:00+00:00</published>
<updated>2019-09-18T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//computer-science/%5B%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%5D%2002.%20%EC%8A%A4%ED%83%9D%20(Stack)
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//computer-science/2019-09-18-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-02.-%EC%8A%A4%ED%83%9D-(Stack)/">
<h1 id="02-스택-stack---python으로-구현하기">02. 스택 (Stack) - python으로 구현하기</h1> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Computer-Science/image/02.stack/image1.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <h2 id="1-정의">1. 정의</h2> <p>가장 나중에 쌓은 데이터를 가장 먼저 꺼낼 수 있는 구조를 가지고 있다.<br /> 즉 <strong>LIFO(Last in First out), FILO(First in Last out)</strong>구조를 가지고있다.<br /></p> <ul> <li>push : 데이터를 스택에 넣는다.<br /></li> <li>pop : 데이터를 스택에서 꺼낸다.</li> </ul> <h2 id="2-특징">2. 특징</h2> <ul> <li>컴퓨터 내부의 프로세스 구조의 함수 동작 방식에 쓰임.<br /></li> <li>데이터를 제한적으로 접근할 수 있는 구조이다.(한쪽 끝에서만 자료를 넣거나 뺄 수 있다.)</li> <li>단순하고 빠른 성능을 위해 사용됨.</li> </ul> <p><strong>장점</strong></p> <ul> <li>구조가 단순해서, 구현이 쉽다.</li> <li>데이터 저장/읽기 속도가 빠르다.<br /></li> </ul> <p><strong>단점</strong></p> <ul> <li>데이터 최대 갯수를 미리 정해야 한다.</li> <li>저장 공간의 낭비가 발생할 수 있다.</li> </ul> <h2 id="3-코드-구현">3. 코드 구현</h2> <h3 id="list-사용하여-구현하기">list 사용하여 구현하기</h3> <ul> <li>stack_htm class 구현</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">stack_htm</span><span class="p">:</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span> <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span> <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="k">try</span><span class="p">:</span> <span class="n">temp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">return</span> <span class="n">temp</span> <span class="k">except</span><span class="p">:</span> <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span> <span class="k">def</span> <span class="nf">ssize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="p">)</span> </code></pre></div></div> <ul> <li>test</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTM</span> <span class="o">=</span> <span class="n">stack_htm</span><span class="p">()</span> <span class="c1"># push </span><span class="n">HTM</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">HTM</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">HTM</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="n">HTM</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="n">HTM</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1, 2, 3, 4, 5] </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ssize </span><span class="k">print</span><span class="p">(</span><span class="s">'==&gt;&gt; ssize : '</span><span class="p">,</span><span class="n">HTM</span><span class="o">.</span><span class="n">ssize</span><span class="p">())</span> <span class="c1"># pop </span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">HTM</span><span class="o">.</span><span class="n">ssize</span><span class="p">()):</span> <span class="k">print</span><span class="p">(</span><span class="s">'==&gt;&gt; pop : '</span><span class="p">,</span><span class="n">HTM</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span> <span class="k">print</span><span class="p">(</span><span class="s">'==&gt;&gt; ssize : '</span><span class="p">,</span><span class="n">HTM</span><span class="o">.</span><span class="n">ssize</span><span class="p">())</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>==&gt;&gt; ssize : 5 ==&gt;&gt; pop : 5 ==&gt;&gt; ssize : 4 ==&gt;&gt; pop : 4 ==&gt;&gt; ssize : 3 ==&gt;&gt; pop : 3 ==&gt;&gt; ssize : 2 ==&gt;&gt; pop : 2 ==&gt;&gt; ssize : 1 ==&gt;&gt; pop : 1 ==&gt;&gt; ssize : 0 </code></pre></div></div>
</content>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html">02. 스택 (Stack) - python으로 구현하기</summary>
<media:thumbnail xmlns:media="https://search.yahoo.com/mrss/" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Computer-Science/image/02.stack/image1.png?raw=true"/>
<media:content xmlns:media="https://search.yahoo.com/mrss/" medium="image" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Computer-Science/image/02.stack/image1.png?raw=true"/>
</entry>
<entry>
<title type="html">[자료구조] 01. 큐 (Queue) - python</title>
<link href="https://hwangtoemat.github.io//computer-science/2019-09-10-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-01.-%ED%81%90-(Queue)-python/" rel="alternate" type="text/html" title="[자료구조] 01. 큐 (Queue) - python"/>
<published>2019-09-10T00:00:00+00:00</published>
<updated>2019-09-10T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//computer-science/%5B%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%5D%2001.%20%ED%81%90%20(Queue)%20-%20python
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//computer-science/2019-09-10-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-01.-%ED%81%90-(Queue)-python/">
<h1 id="01-큐-queue---python으로-구현하기">01. 큐 (Queue) - python으로 구현하기</h1> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Computer-Science/image/01.queue/image1.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <h2 id="1-정의">1. 정의</h2> <p>줄을 서는 거와 같이 가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조이다.<br /> 즉 <strong>FIFO(First in First out), LILO(Last in Last out)</strong>구조를 가지고있다.<br /></p> <ul> <li>Enqueue : 큐에 데이터를 넣는 기능 후단(rear)에서 이루어짐<br /></li> <li>Dequeue : 큐에서 데이터를 꺼내는 기능 전단(front)에서 이루어짐</li> </ul> <h2 id="2-특징">2. 특징</h2> <ul> <li>멀티 태스킹을 위한 프로세스 스케쥴링 방식을 구현하기 위해 많이 사용됨<br /></li> <li>데이터가 입력된 시간 순서대로 처리할때 유리하다</li> </ul> <h2 id="3-종류">3. 종류</h2> <ol> <li>Queue(FIFO)<br /> <ul> <li>FIFO(First in First out), LILO(Last in Last out)구조의 일반적인 큐<br /></li> </ul> </li> <li>Priority Queue<br /> <ul> <li>index값을 데이터마다 지정하여 순서를 정하는 형태<br /></li> </ul> </li> <li>Circular Queue<br /> <ul> <li>직선 큐에서 데이터를 제거 할때 추가적인 연산이 생기는 단점을 극복하기 위한 원 형태의 큐<br /></li> </ul> </li> <li>Linked Queue<br /> <ul> <li>링크드 리스트와 비슷 한 형태로 노드에 후단(rear)방향의 주소값이 있고 전단(front)에서 Dequeue, 후단(rear)에서 Enqueue가 일어난다.<br /></li> </ul> </li> </ol> <h2 id="4-코드-구현">4. 코드 구현</h2> <h3 id="간단하게-라이브러리로-구현하기">간단하게 라이브러리로 구현하기</h3> <ul> <li>Queue</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">queue</span> <span class="n">queue_code</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span> <span class="c1"># Enqueue </span><span class="n">queue_code</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="s">"data_1"</span><span class="p">)</span> <span class="n">queue_code</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="s">"data_2"</span><span class="p">)</span> <span class="n">queue_code</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="s">"data_3"</span><span class="p">)</span> <span class="n">queue_code</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="s">"data_4"</span><span class="p">)</span> <span class="n">queue_code</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="s">"data_5"</span><span class="p">)</span> <span class="n">queue_code</span><span class="o">.</span><span class="n">qsize</span><span class="p">()</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5 </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Dequeue </span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">queue_code</span><span class="o">.</span><span class="n">qsize</span><span class="p">()):</span> <span class="k">print</span><span class="p">(</span><span class="n">queue_code</span><span class="o">.</span><span class="n">get</span><span class="p">())</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data_1 data_2 data_3 data_4 data_5 </code></pre></div></div> <ul> <li>PriorityQueue</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># PriorityQueue </span><span class="n">priority_queue</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">PriorityQueue</span><span class="p">()</span> <span class="c1"># Enqueue </span><span class="n">priority_queue</span><span class="o">.</span><span class="n">put</span><span class="p">((</span><span class="mi">5</span><span class="p">,</span> <span class="s">"data_1"</span><span class="p">))</span> <span class="n">priority_queue</span><span class="o">.</span><span class="n">put</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="s">"data_2"</span><span class="p">))</span> <span class="n">priority_queue</span><span class="o">.</span><span class="n">put</span><span class="p">((</span><span class="mi">11</span><span class="p">,</span> <span class="s">"data_3"</span><span class="p">))</span> <span class="n">priority_queue</span><span class="o">.</span><span class="n">put</span><span class="p">((</span><span class="mi">8</span><span class="p">,</span> <span class="s">"data_4"</span><span class="p">))</span> <span class="n">priority_queue</span><span class="o">.</span><span class="n">put</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="s">"data_5"</span><span class="p">))</span> <span class="n">priority_queue</span><span class="o">.</span><span class="n">qsize</span><span class="p">()</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5 </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Dequeue </span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">priority_queue</span><span class="o">.</span><span class="n">qsize</span><span class="p">()):</span> <span class="k">print</span><span class="p">(</span><span class="n">priority_queue</span><span class="o">.</span><span class="n">get</span><span class="p">())</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1, 'data_5') (3, 'data_2') (5, 'data_1') (8, 'data_4') (11, 'data_3') </code></pre></div></div> <h3 id="라이브러리-안쓰고-구현하기list-사용하여">라이브러리 안쓰고 구현하기(list 사용하여)</h3> <ul> <li>queue_htm class 구현</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">queue_htm</span><span class="p">:</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span> <span class="k">def</span> <span class="nf">Enqueue</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span> <span class="k">def</span> <span class="nf">Dequeue</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="k">try</span><span class="p">:</span> <span class="n">temp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">return</span> <span class="n">temp</span> <span class="k">except</span><span class="p">:</span> <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span> <span class="k">def</span> <span class="nf">qsize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">)</span> </code></pre></div></div> <ul> <li>test</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTM</span> <span class="o">=</span> <span class="n">queue_htm</span><span class="p">()</span> <span class="c1"># Enqueue </span><span class="n">HTM</span><span class="o">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">HTM</span><span class="o">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">HTM</span><span class="o">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="n">HTM</span><span class="o">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="n">HTM</span><span class="o">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1, 2, 3, 4, 5] </code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># qsize </span><span class="k">print</span><span class="p">(</span><span class="s">'==&gt;&gt; qsize : '</span><span class="p">,</span><span class="n">HTM</span><span class="o">.</span><span class="n">qsize</span><span class="p">())</span> <span class="c1"># Dequeue </span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">HTM</span><span class="o">.</span><span class="n">qsize</span><span class="p">()):</span> <span class="k">print</span><span class="p">(</span><span class="s">'==&gt;&gt; Dequeue : '</span><span class="p">,</span><span class="n">HTM</span><span class="o">.</span><span class="n">Dequeue</span><span class="p">())</span> <span class="k">print</span><span class="p">(</span><span class="s">'==&gt;&gt; qsize : '</span><span class="p">,</span><span class="n">HTM</span><span class="o">.</span><span class="n">qsize</span><span class="p">())</span> </code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>==&gt;&gt; qsize : 5 ==&gt;&gt; Dequeue : 1 ==&gt;&gt; qsize : 4 ==&gt;&gt; Dequeue : 2 ==&gt;&gt; qsize : 3 ==&gt;&gt; Dequeue : 3 ==&gt;&gt; qsize : 2 ==&gt;&gt; Dequeue : 4 ==&gt;&gt; qsize : 1 ==&gt;&gt; Dequeue : 5 ==&gt;&gt; qsize : 0 </code></pre></div></div>
</content>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html">01. 큐 (Queue) - python으로 구현하기</summary>
<media:thumbnail xmlns:media="https://search.yahoo.com/mrss/" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Computer-Science/image/01.queue/image1.png?raw=true"/>
<media:content xmlns:media="https://search.yahoo.com/mrss/" medium="image" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Computer-Science/image/01.queue/image1.png?raw=true"/>
</entry>
<entry>
<title type="html">3-2. SRGAN 코드 리뷰</title>
<link href="https://hwangtoemat.github.io//paper-review/2019-08-30-SRGAN-%EC%BD%94%EB%93%9C/" rel="alternate" type="text/html" title="3-2. SRGAN 코드 리뷰"/>
<published>2019-08-30T00:00:00+00:00</published>
<updated>2019-08-30T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//paper-review/SRGAN%20%EC%BD%94%EB%93%9C
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//paper-review/2019-08-30-SRGAN-%EC%BD%94%EB%93%9C/">
<p><a href="https://github.com/HwangToeMat/SRGAN_Pytorch_HTM">[main code]</a></p> <h1 id="photo-realistic-single-image-super-resolution-using-a-generative-adversarial-network">Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network</h1> <h2 id="모델-구조">모델 구조</h2> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-3-1.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>그림과 같이 새로운 데이터(SR)을 생성하는 Generator model과 그 데이터를 판단하는 Discriminator model로 이루어졌다. Super-Resolution에서 GAN의 구조를 처음으로 도입하였다.</p> <h2 id="usage">Usage</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>usage: main.py [-h] [--batchSize BATCHSIZE] [--nEpochs NEPOCHS] [--cuda] [--threads THREADS] [--pretrained PRETRAINED] [--gpus GPUS] PyTorch SRGAN optional arguments: -h, --help show this help message and exit --batchSize BATCHSIZE --nEpochs NEPOCHS --cuda --threads THREADS --pretrained PRETRAINED --gpus GPUS </code></pre></div></div> <h2 id="data-augmentation">Data augmentation</h2> <h3 id="flip">flip</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">flip</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]:</span> <span class="k">if</span> <span class="n">flip</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="n">image_f</span> <span class="o">=</span> <span class="n">image</span> <span class="k">else</span><span class="p">:</span> <span class="n">image_f</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">flip</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> </code></pre></div></div> <h3 id="rotate">rotate</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">img_rotate</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">degree</span><span class="p">):</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">shape</span> <span class="n">matrix</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">getRotationMatrix2D</span><span class="p">((</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="mi">90</span><span class="o">*</span><span class="n">degree</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">degree</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">degree</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> <span class="n">dst</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">warpAffine</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">))</span> <span class="k">else</span><span class="p">:</span> <span class="n">dst</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">warpAffine</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">))</span> <span class="k">return</span> <span class="n">dst</span> </code></pre></div></div> <h3 id="downsize">downsize</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">img_downsize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">ds</span><span class="p">):</span> <span class="n">dst</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">dsize</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">fx</span><span class="o">=</span><span class="n">ds</span><span class="p">,</span> <span class="n">fy</span><span class="o">=</span><span class="n">ds</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">INTER_LINEAR</span><span class="p">)</span> <span class="k">return</span> <span class="n">dst</span> </code></pre></div></div> <h3 id="crop-image">crop image</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sub_img</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">i_size</span> <span class="o">=</span> <span class="mi">33</span><span class="p">,</span> <span class="n">l_size</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">stride</span> <span class="o">=</span> <span class="mi">14</span><span class="p">):</span> <span class="n">sub_ipt</span> <span class="o">=</span> <span class="p">[]</span> <span class="n">sub_lab</span> <span class="o">=</span> <span class="p">[]</span> <span class="n">pad</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">i_size</span><span class="o">-</span><span class="n">l_size</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span> <span class="k">for</span> <span class="n">h</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">input</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">i_size</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">stride</span><span class="p">):</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">input</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">i_size</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">stride</span><span class="p">):</span> <span class="n">sub_i</span> <span class="o">=</span> <span class="nb">input</span><span class="p">[</span><span class="n">h</span><span class="p">:</span><span class="n">h</span><span class="o">+</span><span class="n">i_size</span><span class="p">,</span><span class="n">w</span><span class="p">:</span><span class="n">w</span><span class="o">+</span><span class="n">i_size</span><span class="p">]</span> <span class="n">sub_l</span> <span class="o">=</span> <span class="n">label</span><span class="p">[</span><span class="n">h</span> <span class="o">+</span> <span class="n">pad</span> <span class="p">:</span><span class="n">h</span> <span class="o">+</span> <span class="n">pad</span> <span class="o">+</span> <span class="n">l_size</span><span class="p">,</span><span class="n">w</span> <span class="o">+</span> <span class="n">pad</span> <span class="p">:</span><span class="n">w</span> <span class="o">+</span> <span class="n">pad</span> <span class="o">+</span> <span class="n">l_size</span><span class="p">]</span> <span class="n">sub_i</span> <span class="o">=</span> <span class="n">sub_i</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">i_size</span><span class="p">,</span><span class="n">i_size</span><span class="p">)</span> <span class="n">sub_l</span> <span class="o">=</span> <span class="n">sub_l</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">l_size</span><span class="p">,</span><span class="n">l_size</span><span class="p">)</span> <span class="n">sub_ipt</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sub_i</span><span class="p">)</span> <span class="n">sub_lab</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sub_l</span><span class="p">)</span> <span class="k">return</span> <span class="n">sub_ipt</span><span class="p">,</span> <span class="n">sub_lab</span> </code></pre></div></div> <h3 id="down-scale">down scale</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">zoom_img</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">scale</span><span class="p">):</span> <span class="n">label</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'float'</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span> <span class="n">temp_input</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">dsize</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">fx</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">scale</span><span class="p">,</span> <span class="n">fy</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">scale</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">INTER_AREA</span><span class="p">)</span> <span class="nb">input</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">temp_input</span><span class="p">,</span> <span class="n">dsize</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">fx</span><span class="o">=</span><span class="n">scale</span><span class="p">,</span> <span class="n">fy</span><span class="o">=</span><span class="n">scale</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">INTER_CUBIC</span><span class="p">)</span> <span class="k">return</span> <span class="nb">input</span><span class="p">,</span> <span class="n">label</span> </code></pre></div></div> <h2 id="model">Model</h2> <ul> <li>Generator Model</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">G_Net</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="nb">super</span><span class="p">(</span><span class="n">G_Net</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span> <span class="bp">self</span><span class="o">.</span><span class="nb">input</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">9</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">4</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">PReLU</span><span class="p">()</span> <span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock1</span> <span class="o">=</span> <span class="n">ResidualBlock</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock2</span> <span class="o">=</span> <span class="n">ResidualBlock</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock3</span> <span class="o">=</span> <span class="n">ResidualBlock</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock4</span> <span class="o">=</span> <span class="n">ResidualBlock</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock5</span> <span class="o">=</span> <span class="n">ResidualBlock</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">output_residual</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">pixel_shuffle</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">64</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">**</span> <span class="mi">2</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">PixelShuffle</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">PReLU</span><span class="p">()</span> <span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">pixel_shuffle2</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">64</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">**</span> <span class="mi">2</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">PixelShuffle</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">PReLU</span><span class="p">()</span> <span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">output</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">9</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">4</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Tanh</span><span class="p">()</span> <span class="p">)</span> <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span> <span class="nb">input</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="nb">input</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="n">ResidualBlock1</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock1</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span> <span class="n">ResidualBlock2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock2</span><span class="p">(</span><span class="n">ResidualBlock1</span><span class="p">)</span> <span class="n">ResidualBlock3</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock3</span><span class="p">(</span><span class="n">ResidualBlock2</span><span class="p">)</span> <span class="n">ResidualBlock4</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock4</span><span class="p">(</span><span class="n">ResidualBlock3</span><span class="p">)</span> <span class="n">ResidualBlock5</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ResidualBlock5</span><span class="p">(</span><span class="n">ResidualBlock4</span><span class="p">)</span> <span class="n">output_residual</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">output_residual</span><span class="p">(</span><span class="n">ResidualBlock5</span><span class="p">)</span> <span class="n">pixel_shuffle</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pixel_shuffle</span><span class="p">(</span><span class="n">output_residual</span> <span class="o">+</span> <span class="nb">input</span><span class="p">)</span> <span class="n">pixel_shuffle2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pixel_shuffle2</span><span class="p">(</span><span class="n">pixel_shuffle</span><span class="p">)</span> <span class="n">output</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="n">pixel_shuffle2</span><span class="p">)</span> <span class="n">output</span> <span class="o">=</span> <span class="p">(</span><span class="n">output</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="k">return</span> <span class="n">output</span> </code></pre></div></div> <ul> <li>Discriminator Model</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">D_Net</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="nb">super</span><span class="p">(</span><span class="n">D_Net</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span> <span class="bp">self</span><span class="o">.</span><span class="n">Net</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">128</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">128</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">512</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">512</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">AdaptiveAvgPool2d</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sigmoid</span><span class="p">()</span> <span class="p">)</span> <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span> <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Net</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">squeeze</span><span class="p">()</span> </code></pre></div></div> <h2 id="train">Train</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">epoch_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epoch</span><span class="p">,</span> <span class="n">opt</span><span class="o">.</span><span class="n">nEpochs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span> <span class="k">print</span><span class="p">(</span><span class="s">"===&gt; Start epoch {} #################################################################"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">epoch_</span><span class="p">))</span> <span class="n">G_Net</span><span class="o">.</span><span class="n">train</span><span class="p">()</span> <span class="n">D_Net</span><span class="o">.</span><span class="n">train</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">training_data_loader</span><span class="p">):</span> <span class="n">HR</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="n">label</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span> <span class="n">LR</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">():</span> <span class="n">HR</span> <span class="o">=</span> <span class="n">HR</span><span class="o">.</span><span class="n">cuda</span><span class="p">()</span> <span class="n">LR</span> <span class="o">=</span> <span class="n">LR</span><span class="o">.</span><span class="n">cuda</span><span class="p">()</span> <span class="n">fake_img</span> <span class="o">=</span> <span class="n">G_Net</span><span class="p">(</span><span class="n">LR</span><span class="p">)</span> <span class="c1"># Train Discriminator model </span> <span class="n">D_Net</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span> <span class="n">real_rate</span> <span class="o">=</span> <span class="n">D_Net</span><span class="p">(</span><span class="n">HR</span><span class="p">)</span> <span class="n">fake_rate</span> <span class="o">=</span> <span class="n">D_Net</span><span class="p">(</span><span class="n">fake_img</span><span class="p">)</span> <span class="n">d_loss</span> <span class="o">=</span> <span class="n">D_Loss</span><span class="p">(</span><span class="n">fake_rate</span><span class="p">,</span> <span class="n">real_rate</span><span class="p">)</span> <span class="n">d_loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span> <span class="n">D_optim</span><span class="o">.</span><span class="n">step</span><span class="p">()</span> <span class="c1"># Train Generator model </span> <span class="n">G_Net</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span> <span class="n">g_loss</span> <span class="o">=</span> <span class="n">G_Loss</span><span class="p">(</span><span class="n">fake_rate</span><span class="p">,</span> <span class="n">fake_img</span><span class="p">,</span> <span class="n">HR</span><span class="p">)</span> <span class="n">g_loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span> <span class="n">G_optim</span><span class="o">.</span><span class="n">step</span><span class="p">()</span> </code></pre></div></div> <h2 id="loss-function">loss function</h2> <ul> <li>GeneratorLoss(MSE_loss + VGG_loss + Adversarial_loss)</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">GeneratorLoss</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="nb">super</span><span class="p">(</span><span class="n">GeneratorLoss</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span> <span class="n">vgg</span> <span class="o">=</span> <span class="n">vgg16</span><span class="p">(</span><span class="n">pretrained</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="n">vgg_loss</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span><span class="o">*</span><span class="nb">list</span><span class="p">(</span><span class="n">vgg</span><span class="o">.</span><span class="n">features</span><span class="p">)[:</span><span class="mi">31</span><span class="p">])</span><span class="o">.</span><span class="nb">eval</span><span class="p">()</span> <span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">vgg_loss</span><span class="o">.</span><span class="n">parameters</span><span class="p">():</span> <span class="n">param</span><span class="o">.</span><span class="n">requires_grad</span> <span class="o">=</span> <span class="bp">False</span> <span class="bp">self</span><span class="o">.</span><span class="n">vgg_loss</span> <span class="o">=</span> <span class="n">vgg_loss</span> <span class="bp">self</span><span class="o">.</span><span class="n">mse_loss</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MSELoss</span><span class="p">()</span> <span class="bp">self</span><span class="o">.</span><span class="n">cross_entropy</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">BCELoss</span><span class="p">()</span> <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fake_rate</span><span class="p">,</span> <span class="n">SR</span><span class="p">,</span> <span class="n">HR</span><span class="p">):</span> <span class="c1"># MSE Loss </span> <span class="n">MSE_loss</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mse_loss</span><span class="p">(</span><span class="n">SR</span><span class="p">,</span> <span class="n">HR</span><span class="p">)</span> <span class="c1"># VGG Loss </span> <span class="n">VGG_loss</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mse_loss</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">vgg_loss</span><span class="p">(</span><span class="n">SR</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">vgg_loss</span><span class="p">(</span><span class="n">HR</span><span class="p">))</span> <span class="c1"># Adversarial Loss </span> <span class="n">Adversarial_loss</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cross_entropy</span><span class="p">(</span><span class="n">fake_rate</span><span class="p">,</span><span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">fake_rate</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span><span class="o">.</span><span class="n">cuda</span><span class="p">())</span> <span class="k">return</span> <span class="n">MSE_loss</span> <span class="o">+</span> <span class="mf">6e-3</span> <span class="o">*</span> <span class="n">VGG_loss</span> <span class="o">+</span> <span class="mf">1e-3</span> <span class="o">*</span> <span class="n">Adversarial_loss</span> </code></pre></div></div> <ul> <li>DiscriminatorLoss(Fake_img Correct Rate + Real_img Correct Rate)</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DiscriminatorLoss</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="nb">super</span><span class="p">(</span><span class="n">DiscriminatorLoss</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span> <span class="bp">self</span><span class="o">.</span><span class="n">cross_entropy</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">BCELoss</span><span class="p">()</span> <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fake_rate</span><span class="p">,</span> <span class="n">real_rate</span><span class="p">):</span> <span class="c1"># Fake_img Correct Rate </span> <span class="n">Fake_img_CR</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cross_entropy</span><span class="p">(</span><span class="n">fake_rate</span><span class="p">,</span><span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">fake_rate</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span><span class="o">.</span><span class="n">cuda</span><span class="p">())</span> <span class="c1"># Real_img Correct Rate </span> <span class="n">Real_img_CR</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cross_entropy</span><span class="p">(</span><span class="n">real_rate</span><span class="p">,</span><span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">real_rate</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span><span class="o">.</span><span class="n">cuda</span><span class="p">())</span> <span class="k">return</span> <span class="n">Fake_img_CR</span> <span class="o">+</span> <span class="n">Real_img_CR</span> </code></pre></div></div> <h2 id="test">Test</h2> <h3 id="parameters">Parameters</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>batchSize =64 cuda = True lr = 0.001 nEpochs = 20 optimizer= 'Adam' </code></pre></div></div> <p>-&gt; 30 hours for train</p> <h3 id="resultlrleft-srright">Result[LR(left), SR(right)]</h3> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/SRGAN/image8.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>원본사진에서 매우 작은 부분을 확대한 이미지인 만큼 엄청나게 선명한 이미지는 아니지원 원본(왼쪽)에 비해 결과물(오른쪽)이 경계선부분이 훨씬 매끄러운것을 알 수 있다.</p>
</content>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html">[main code]</summary>
<media:thumbnail xmlns:media="https://search.yahoo.com/mrss/" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-3-2.png?raw=true"/>
<media:content xmlns:media="https://search.yahoo.com/mrss/" medium="image" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-3-2.png?raw=true"/>
</entry>
<entry>
<title type="html">3-1. SRGAN 논문 리뷰</title>
<link href="https://hwangtoemat.github.io//paper-review/2019-08-15-SRGAN-%EB%82%B4%EC%9A%A9/" rel="alternate" type="text/html" title="3-1. SRGAN 논문 리뷰"/>
<published>2019-08-15T00:00:00+00:00</published>
<updated>2019-08-15T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//paper-review/SRGAN%20%EB%82%B4%EC%9A%A9
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//paper-review/2019-08-15-SRGAN-%EB%82%B4%EC%9A%A9/">
<p><a href="https://arxiv.org/abs/1609.04802">[PDF] 논문원본</a></p> <h2 id="photo-realistic-single-image-super-resolution-using-a-generative-adversarial-network">Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network</h2> <h3 id="모델-구조">모델 구조</h3> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-3-1.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>그림과 같이 새로운 데이터(SR)을 생성하는 Generator model과 그 데이터를 판단하는 Discriminator model로 이루어졌다. Super-Resolution에서 GAN의 구조를 처음으로 도입하였다.</p> <h3 id="기존의-방법과-비교">기존의 방법과 비교</h3> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/SRGAN/image1.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>위의 사진은 왼쪽부터 bicubic, MSE를 사용한 모델, SRGAN, 원본이미지이다. 수치상으로 보면 SRResNet이 SRGAN보다 좋지만 눈으로 보기에는 SRGAN이 훨씬 선명한 것을 알 수 있다. 하지만 원본이미지와 비교했을때 머리띠의 문양이나 목부분 장식의 문양이 원본과 완전히 다른 새로운 문양으로 나타났기 때문에 정확도가 중요한 의료파트에서는 쓰기 힘들것으로 보인다.</p> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/SRGAN/image2.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>MSE 방식과 GAN 방식을 자세히 비교해보면 먼저 MSE는 가능한 solution 값들의 평균이기 때문에 훨씬 smooth하고 GAN방식은 natural image를 reconstruction 했기때문에 훨씬 convincing하다.</p> <h3 id="loss-function">Loss function</h3> <ul> <li>Perceptual loss</li> </ul> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/SRGAN/image3.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>이 논문에서는 두가지 loss를 합쳐 놓은 perceptual loss를 사용하였다.</p> <ul> <li>Content loss</li> </ul> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/SRGAN/image4.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>먼저 content loss로 VGG19모델을 사용하여 생성된이미지(SR)과 HR의 VGG모델 내의 feature map의 차이 값을 loss로 사용하였다.</p> <ul> <li>Adversarial loss</li> </ul> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/SRGAN/image5.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>그리고 adversarial loss를 사용하여 생성된 이미지(SR)이 조금 더 진짜 같을 수 있도록 하였다.</p> <h3 id="이미지-확대-방법">이미지 확대 방법</h3> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/SRGAN/image7.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>논문에서는 sub-pixel convolution layers라고만 나와있고 그림에는 pixel-shuffler라고만 나와있다. 위의 방법은 Real-Time Single Image and Video Super-Resolution Using an Efficient Sub-Pixel Convolutional Neural Network(ESPCN)에서 소개된 방법으로 기존의 (H x W x C)의 이미지를 r<sup>2</sup>개의 이미지(H x W x r<sup>2</sup>C)로 늘리고 이를 그림과 같이 원본보다 r배큰 이미지(rH x rW x C)로 만든다.</p> <h3 id="실험-결과">실험 결과</h3> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/SRGAN/image6.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p>
</content>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html">[PDF] 논문원본</summary>
<media:thumbnail xmlns:media="https://search.yahoo.com/mrss/" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-3-1.png?raw=true"/>
<media:content xmlns:media="https://search.yahoo.com/mrss/" medium="image" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-3-1.png?raw=true"/>
</entry>
<entry>
<title type="html">2-2. VDSR 코드 리뷰</title>
<link href="https://hwangtoemat.github.io//paper-review/2019-08-09-VDSR-%EC%BD%94%EB%93%9C/" rel="alternate" type="text/html" title="2-2. VDSR 코드 리뷰"/>
<published>2019-08-09T00:00:00+00:00</published>
<updated>2019-08-09T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//paper-review/VDSR%20%EC%BD%94%EB%93%9C
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//paper-review/2019-08-09-VDSR-%EC%BD%94%EB%93%9C/">
<p><a href="https://github.com/HwangToeMat/VDSR_Pytorch_HTM">[main code]</a></p> <h1 id="accurate-image-super-resolution-using-very-deep-convolutional-networks">Accurate Image Super-Resolution Using Very Deep Convolutional Networks</h1> <h2 id="모델-구조">모델 구조</h2> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-2-1.jpeg?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>그림과 같이 총 20개의 layer로 이루어져있고, 각각 3*3사이즈의 커널로 이루어져 있다. 특이한 점은 19개의 layer를 지나 만들어진 residual(r)값과 skip-connection을 통해 지나온 ILR(x)을 더 하여 고화질의 HR을 출력하는 방식이다. 위의 방법을 통해 기존의 얕은 층 모델에서 깊은 층 모델로 진화할 수 있게 되었다.</p> <h2 id="usage">Usage</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>usage: main.py [-h] [--batchSize BATCHSIZE] [--nEpochs NEPOCHS] [--lr LR] [--step STEP] [--cuda] [--start-epoch START_EPOCH] [--clip CLIP] [--threads THREADS] [--momentum MOMENTUM] [--weight-decay WEIGHT_DECAY] [--pretrained PRETRAINED] [--gpus GPUS] [--optimizer OPTIMIZER] PyTorch VDSR optional arguments: -h, --help show this help message and exit --batchSize BATCHSIZE --nEpochs NEPOCHS --lr LR --step STEP --cuda --start-epoch START_EPOCH --clip CLIP --threads THREADS --momentum MOMENTUM --weight-decay WEIGHT_DECAY, --wd WEIGHT_DECAY --pretrained PRETRAINED --gpus GPUS --optimizer OPTIMIZER (SGD or Adam) </code></pre></div></div> <h2 id="data-augmentation">Data augmentation</h2> <h3 id="flip">flip</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">flip</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]:</span> <span class="k">if</span> <span class="n">flip</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="n">image_f</span> <span class="o">=</span> <span class="n">image</span> <span class="k">else</span><span class="p">:</span> <span class="n">image_f</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">flip</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> </code></pre></div></div> <h3 id="rotate">rotate</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">img_rotate</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">degree</span><span class="p">):</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">shape</span> <span class="n">matrix</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">getRotationMatrix2D</span><span class="p">((</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="mi">90</span><span class="o">*</span><span class="n">degree</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">degree</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">degree</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> <span class="n">dst</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">warpAffine</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">))</span> <span class="k">else</span><span class="p">:</span> <span class="n">dst</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">warpAffine</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">))</span> <span class="k">return</span> <span class="n">dst</span> </code></pre></div></div> <h3 id="downsize">downsize</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">img_downsize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">ds</span><span class="p">):</span> <span class="n">dst</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">dsize</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">fx</span><span class="o">=</span><span class="n">ds</span><span class="p">,</span> <span class="n">fy</span><span class="o">=</span><span class="n">ds</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">INTER_LINEAR</span><span class="p">)</span> <span class="k">return</span> <span class="n">dst</span> </code></pre></div></div> <h3 id="crop-image">crop image</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sub_img</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">i_size</span> <span class="o">=</span> <span class="mi">33</span><span class="p">,</span> <span class="n">l_size</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">stride</span> <span class="o">=</span> <span class="mi">14</span><span class="p">):</span> <span class="n">sub_ipt</span> <span class="o">=</span> <span class="p">[]</span> <span class="n">sub_lab</span> <span class="o">=</span> <span class="p">[]</span> <span class="n">pad</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">i_size</span><span class="o">-</span><span class="n">l_size</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span> <span class="k">for</span> <span class="n">h</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">input</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">i_size</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">stride</span><span class="p">):</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">input</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">i_size</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">stride</span><span class="p">):</span> <span class="n">sub_i</span> <span class="o">=</span> <span class="nb">input</span><span class="p">[</span><span class="n">h</span><span class="p">:</span><span class="n">h</span><span class="o">+</span><span class="n">i_size</span><span class="p">,</span><span class="n">w</span><span class="p">:</span><span class="n">w</span><span class="o">+</span><span class="n">i_size</span><span class="p">]</span> <span class="n">sub_l</span> <span class="o">=</span> <span class="n">label</span><span class="p">[</span><span class="n">h</span> <span class="o">+</span> <span class="n">pad</span> <span class="p">:</span><span class="n">h</span> <span class="o">+</span> <span class="n">pad</span> <span class="o">+</span> <span class="n">l_size</span><span class="p">,</span><span class="n">w</span> <span class="o">+</span> <span class="n">pad</span> <span class="p">:</span><span class="n">w</span> <span class="o">+</span> <span class="n">pad</span> <span class="o">+</span> <span class="n">l_size</span><span class="p">]</span> <span class="n">sub_i</span> <span class="o">=</span> <span class="n">sub_i</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">i_size</span><span class="p">,</span><span class="n">i_size</span><span class="p">)</span> <span class="n">sub_l</span> <span class="o">=</span> <span class="n">sub_l</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">l_size</span><span class="p">,</span><span class="n">l_size</span><span class="p">)</span> <span class="n">sub_ipt</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sub_i</span><span class="p">)</span> <span class="n">sub_lab</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sub_l</span><span class="p">)</span> <span class="k">return</span> <span class="n">sub_ipt</span><span class="p">,</span> <span class="n">sub_lab</span> </code></pre></div></div> <h3 id="down-scale">down scale</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">zoom_img</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">scale</span><span class="p">):</span> <span class="n">label</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'float'</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span> <span class="n">temp_input</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">dsize</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">fx</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">scale</span><span class="p">,</span> <span class="n">fy</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">scale</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">INTER_AREA</span><span class="p">)</span> <span class="nb">input</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">temp_input</span><span class="p">,</span> <span class="n">dsize</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">fx</span><span class="o">=</span><span class="n">scale</span><span class="p">,</span> <span class="n">fy</span><span class="o">=</span><span class="n">scale</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">INTER_CUBIC</span><span class="p">)</span> <span class="k">return</span> <span class="nb">input</span><span class="p">,</span> <span class="n">label</span> </code></pre></div></div> <h2 id="model">Model</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Conv_ReLU_Block</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="nb">super</span><span class="p">(</span><span class="n">Conv_ReLU_Block</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span> <span class="bp">self</span><span class="o">.</span><span class="n">conv</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="n">in_channels</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">out_channels</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">relu</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span> <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">conv</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="k">class</span> <span class="nc">Net</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="nb">super</span><span class="p">(</span><span class="n">Net</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span> <span class="bp">self</span><span class="o">.</span><span class="n">residual_layer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">make_layer</span><span class="p">(</span><span class="n">Conv_ReLU_Block</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="nb">input</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="n">in_channels</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">out_channels</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">output</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="n">in_channels</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">out_channels</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="bp">self</span><span class="o">.</span><span class="n">relu</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">modules</span><span class="p">():</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">):</span> <span class="n">n</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">kernel_size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">m</span><span class="o">.</span><span class="n">kernel_size</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">m</span><span class="o">.</span><span class="n">out_channels</span> <span class="n">m</span><span class="o">.</span><span class="n">weight</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">normal_</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sqrt</span><span class="p">(</span><span class="mf">2.</span> <span class="o">/</span> <span class="n">n</span><span class="p">))</span> <span class="k">def</span> <span class="nf">make_layer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">block</span><span class="p">,</span> <span class="n">num_of_layer</span><span class="p">):</span> <span class="n">layers</span> <span class="o">=</span> <span class="p">[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_of_layer</span><span class="p">):</span> <span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">block</span><span class="p">())</span> <span class="k">return</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span><span class="o">*</span><span class="n">layers</span><span class="p">)</span> <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span> <span class="n">residual</span> <span class="o">=</span> <span class="n">x</span> <span class="n">out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="nb">input</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="n">out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">residual_layer</span><span class="p">(</span><span class="n">out</span><span class="p">)</span> <span class="n">out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="n">out</span><span class="p">)</span> <span class="n">out</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">residual</span><span class="p">)</span> <span class="k">return</span> <span class="n">out</span> </code></pre></div></div> <h2 id="train">Train</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">training_data_loader</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">epoch</span><span class="p">):</span> <span class="k">if</span> <span class="n">opt</span><span class="o">.</span><span class="n">optimizer</span> <span class="o">==</span> <span class="s">'SGD'</span><span class="p">:</span> <span class="n">lr</span> <span class="o">=</span> <span class="n">adjust_learning_rate</span><span class="p">(</span><span class="n">optimizer</span><span class="p">,</span> <span class="n">epoch</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">param_group</span> <span class="ow">in</span> <span class="n">optimizer</span><span class="o">.</span><span class="n">param_groups</span><span class="p">:</span> <span class="n">param_group</span><span class="p">[</span><span class="s">"lr"</span><span class="p">]</span> <span class="o">=</span> <span class="n">lr</span> <span class="k">print</span><span class="p">(</span><span class="s">"Epoch = {}, lr = {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">epoch</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">.</span><span class="n">param_groups</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"lr"</span><span class="p">]))</span> <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span> <span class="k">for</span> <span class="n">iteration</span><span class="p">,</span> <span class="n">batch</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">training_data_loader</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span> <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span> <span class="nb">input</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="n">batch</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">requires_grad</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span> <span class="n">Variable</span><span class="p">(</span><span class="n">batch</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">requires_grad</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="n">total_loss</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">opt</span><span class="o">.</span><span class="n">cuda</span><span class="p">:</span> <span class="nb">input</span> <span class="o">=</span> <span class="nb">input</span><span class="o">.</span><span class="n">cuda</span><span class="p">()</span> <span class="n">label</span> <span class="o">=</span> <span class="n">label</span><span class="o">.</span><span class="n">cuda</span><span class="p">()</span> <span class="n">output</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span> <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span> <span class="n">total_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span> <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span> <span class="k">if</span> <span class="n">opt</span><span class="o">.</span><span class="n">optimizer</span> <span class="o">==</span> <span class="s">'SGD'</span><span class="p">:</span> <span class="n">nn</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">clip_grad_norm</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span><span class="n">opt</span><span class="o">.</span><span class="n">clip</span><span class="p">)</span> <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span> <span class="n">epoch_loss</span> <span class="o">=</span> <span class="n">total_loss</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">training_data_loader</span><span class="p">)</span> <span class="n">psnr</span> <span class="o">=</span> <span class="n">PSNR</span><span class="p">(</span><span class="n">epoch_loss</span><span class="p">)</span> <span class="k">print</span><span class="p">(</span><span class="s">"===&gt; Epoch[{}]: loss : {:.10f} ,PSNR : {:.10f}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">epoch</span><span class="p">,</span> <span class="n">epoch_loss</span><span class="p">,</span> <span class="n">psnr</span><span class="p">))</span> </code></pre></div></div> <h2 id="loss-function">loss function</h2> <h3 id="mse">MSE</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MSELoss</span><span class="p">(</span><span class="n">size_average</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> </code></pre></div></div> <h3 id="psnr">PSNR</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">PSNR</span><span class="p">(</span><span class="n">loss</span><span class="p">):</span> <span class="n">psnr</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">log10</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="n">loss</span> <span class="o">+</span> <span class="mf">1e-10</span><span class="p">))</span> <span class="k">return</span> <span class="n">psnr</span> </code></pre></div></div> <h2 id="test">Test</h2> <ul> <li>optimizer를 SGD와 Adam으로 각각 학습시켜 성능을 실험해 본다. 세부 파라미터는 아래와 같다</li> </ul> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image8.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <ul> <li>Set5를 기준으로 성능을 테스트한 결과는 아래와 같다.</li> </ul> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image9.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <ul> <li>논문에 나온 test image로 실험해 보았다.</li> </ul> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image10.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>원본 이미지의 뿔부분을 확대하여 보면 눈에 띄게 화질이 좋아진 것을 알 수 있다.</p>
</content>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html">[main code]</summary>
<media:thumbnail xmlns:media="https://search.yahoo.com/mrss/" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-2-2.png?raw=true"/>
<media:content xmlns:media="https://search.yahoo.com/mrss/" medium="image" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-2-2.png?raw=true"/>
</entry>
<entry>
<title type="html">2-1. VDSR 논문 리뷰</title>
<link href="https://hwangtoemat.github.io//paper-review/2019-07-26-VDSR-%EB%82%B4%EC%9A%A9/" rel="alternate" type="text/html" title="2-1. VDSR 논문 리뷰"/>
<published>2019-07-26T00:00:00+00:00</published>
<updated>2019-07-26T00:00:00+00:00</updated>
<id>
https://hwangtoemat.github.io//paper-review/VDSR%20%EB%82%B4%EC%9A%A9
</id>
<content type="html" xml:base="https://hwangtoemat.github.io//paper-review/2019-07-26-VDSR-%EB%82%B4%EC%9A%A9/">
<p><a href="https://cv.snu.ac.kr/research/VDSR/VDSR_CVPR2016.pdf">[PDF] 논문원본</a></p> <h2 id="accurate-image-super-resolution-using-very-deep-convolutional-networks">Accurate Image Super-Resolution Using Very Deep Convolutional Networks</h2> <h3 id="모델-구조">모델 구조</h3> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-2-1.jpeg?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>그림과 같이 총 20개의 layer로 이루어져있고, 각각 3*3사이즈의 커널로 이루어져 있다. 특이한 점은 19개의 layer를 지나 만들어진 residual(r)값과 skip-connection을 통해 지나온 ILR(x)을 더 하여 고화질의 HR을 출력하는 방식이다. 위의 방법을 통해 기존의 얕은 층 모델에서 깊은 층 모델로 진화할 수 있게 되었다.</p> <h3 id="기존의-방법과-비교">기존의 방법과 비교</h3> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image1.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>위의 그래프를 통해 확인 할 수 있듯이 PSNR값을 비교해 봤을때 기존의 방법인 SRCNN보다 훨씬 높은 성능을 갖는것을 알 수 있다.</p> <p><img src="https://github.com/HwangToeMat/SRCNN_Pytorch_HTM/blob/master/image/img-4.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>PSNR은 아래와 같은 식으로 구할 수 있으며, 신호가 가질 수 있는 최대 전력에 대한 잡음의 전력이라고 정의되어 있으며 최대값에 대한 노이즈의 값이기 때문에 값이 높을 수록 해상도가 높은 것으로 볼 수 있다.</p> <h3 id="loss-function">Loss function</h3> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image2.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>모델의 구조에서 알 수 있듯이 residual image(r)은 r = y - x(y는 HR, x는 LR이다.)로 정의할 수 있고 이때 좋은 모델 이려면 r값이 최소가 되도록 해야한다. 따라서 loss function은 위와 같이 나타낼 수 있다.</p> <h3 id="실험">실험</h3> <ul> <li>layer 깊이에 따른 각 scale별 성능비교</li> </ul> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image3.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>모델의 깊이가 깊을수록 scale factor가 낮을수록 성능이 좋은 것을 알 수 있다.</p> <ul> <li>초기 학습률에 따른 residual, non-residual 성능비교</li> </ul> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image4.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>초기 학습률이 작을 수록, non-residual 보다는 residual network가 훨씬 안정적으로 빠르게 수렴하며 성능도 더 높은 것을 알 수 있다.</p> <ul> <li>학습시키는 데이터에 따른 성능비교</li> </ul> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image5.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p>모델을 학습시킬때 여러 scale의 데이터로 학습시킬 수록, 광범위한 scale에서 성능이 높게 나오는 것을 알 수 있다.</p> <h3 id="실험-결과">실험 결과</h3> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image6.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p> <p><img src="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/Paper-Review/image/VDSR/image7.png?raw=true" style="max-width:100%;margin-left: auto; margin-right: auto; display: block;" /></p>
</content>
<author>
<name>Taeho Kim</name>
<email>xoghsms794280@gmail.com</email>
</author>
<summary type="html">[PDF] 논문원본</summary>
<media:thumbnail xmlns:media="https://search.yahoo.com/mrss/" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-2-1.jpeg?raw=true"/>
<media:content xmlns:media="https://search.yahoo.com/mrss/" medium="image" url="https://github.com/HwangToeMat/HwangToeMat.github.io/blob/master/assets/img/thumbnail/pr-2-1.jpeg?raw=true"/>
</entry>
</feed>
